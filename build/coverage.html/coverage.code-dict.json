{"/home/travis/build/npmtest/node-npmtest-react-blessed/test.js":"/* istanbul instrument in package npmtest_react_blessed */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-react-blessed/lib.npmtest_react_blessed.js":"/* istanbul instrument in package npmtest_react_blessed */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_react_blessed = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_react_blessed = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-react-blessed/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-react-blessed && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_react_blessed */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_react_blessed\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_react_blessed.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_react_blessed.rollup.js'] =\n            local.assetsDict['/assets.npmtest_react_blessed.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_react_blessed.__dirname + '/lib.npmtest_react_blessed.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-react-blessed/node_modules/react-blessed/dist/render.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.render = undefined;\n\nvar _ReactInstanceHandles = require('react/lib/ReactInstanceHandles');\n\nvar _ReactInstanceHandles2 = _interopRequireDefault(_ReactInstanceHandles);\n\nvar _ReactElement = require('react/lib/ReactElement');\n\nvar _ReactElement2 = _interopRequireDefault(_ReactElement);\n\nvar _ReactUpdates = require('react/lib/ReactUpdates');\n\nvar _ReactUpdates2 = _interopRequireDefault(_ReactUpdates);\n\nvar _ReactBlessedIDOperations = require('./ReactBlessedIDOperations');\n\nvar _ReactBlessedIDOperations2 = _interopRequireDefault(_ReactBlessedIDOperations);\n\nvar _invariant = require('invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _instantiateReactComponent = require('react/lib/instantiateReactComponent');\n\nvar _instantiateReactComponent2 = _interopRequireDefault(_instantiateReactComponent);\n\nvar _ReactBlessedInjection = require('./ReactBlessedInjection');\n\nvar _ReactBlessedInjection2 = _interopRequireDefault(_ReactBlessedInjection);\n\nvar _blessed = require('blessed');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Injecting dependencies.\n */\n/**\n * React Blessed\n * ==============\n *\n * Exposing the renderer's API.\n */\n(0, _ReactBlessedInjection2.default)();\n\n/**\n * Renders the given react element with blessed.\n *\n * @param  {ReactElement}   element   - Node to update.\n * @param  {BlessedScreen}  screen    - The screen used to render the app.\n * @return {ReactComponent}           - The rendered component instance.\n */\nfunction render(element, screen) {\n\n  // Is the given element valid?\n  (0, _invariant2.default)(_ReactElement2.default.isValidElement(element), 'render(): You must pass a valid ReactElement.');\n\n  // Is the given screen valid?\n  (0, _invariant2.default)(screen instanceof _blessed.Screen, 'render(): You must pass a valid BlessedScreen.');\n\n  // Creating a root id & creating the screen\n  var id = _ReactInstanceHandles2.default.createReactRootID();\n\n  // Mounting the app\n  var component = (0, _instantiateReactComponent2.default)(element);\n\n  // Injecting the screen\n  _ReactBlessedIDOperations2.default.setScreen(screen);\n\n  // The initial render is synchronous but any updates that happen during\n  // rendering, in componentWillMount or componentDidMount, will be batched\n  // according to the current batching strategy.\n  _ReactUpdates2.default.batchedUpdates(function () {\n    // Batched mount component\n    var transaction = _ReactUpdates2.default.ReactReconcileTransaction.getPooled();\n    transaction.perform(function () {\n      component.mountComponent(id, transaction, {});\n    });\n    _ReactUpdates2.default.ReactReconcileTransaction.release(transaction);\n  });\n\n  // Returning the screen so the user can attach listeners etc.\n  return component._instance;\n}\n\nexports.render = render;","/home/travis/build/npmtest/node-npmtest-react-blessed/node_modules/react-blessed/src/ReactBlessedComponent.js":"/**\n * React Blessed Component\n * ========================\n *\n * React component abstraction for the blessed library.\n */\nimport blessed from 'blessed';\nimport ReactMultiChild from 'react/lib/ReactMultiChild';\nimport ReactBlessedIDOperations from './ReactBlessedIDOperations';\nimport invariant from 'invariant';\nimport update from './update';\nimport solveClass from './solveClass';\nimport {extend, groupBy, startCase} from 'lodash';\n\n/**\n * Variable types that must be solved as content rather than real children.\n */\nconst CONTENT_TYPES = {string: true, number: true};\n\n/**\n * Renders the given react element with blessed.\n *\n * @constructor ReactBlessedComponent\n * @extends ReactMultiChild\n */\nexport default class ReactBlessedComponent {\n  constructor(tag) {\n    this._tag = tag.toLowerCase();\n    this._updating = false;\n    this._renderedChildren = null;\n    this._previousStyle = null;\n    this._previousStyleCopy = null;\n    this._rootNodeID = null;\n    this._wrapperState = null;\n    this._topLevelWrapper = null;\n    this._nodeWithLegacyProperties = null;\n  }\n\n  construct(element) {\n\n    // Setting some properties\n    this._currentElement = element;\n    this._eventListener = (type, ...args) => {\n      if (this._updating) return;\n      \n      const handler = this._currentElement.props['on' + startCase(type).replace(/ /g, '')];\n\n      if (typeof handler === 'function') {\n        if (type === 'focus' || type === 'blur') {\n          args[0] = ReactBlessedIDOperations.get(this._rootNodeID)\n        }\n        handler(...args);\n      }\n    };\n  }\n\n  /**\n   * Mounting the root component.\n   *\n   * @internal\n   * @param  {string} rootID - The root blessed ID for this node.\n   * @param  {ReactBlessedReconcileTransaction} transaction\n   * @param  {object} context\n   */\n  mountComponent(rootID, transaction, context) {\n    this._rootNodeID = rootID;\n\n    // Mounting blessed node\n    const node = this.mountNode(\n      ReactBlessedIDOperations.getParent(rootID),\n      this._currentElement\n    );\n\n    ReactBlessedIDOperations.add(rootID, node);\n\n    // Mounting children\n    let childrenToUse = this._currentElement.props.children;\n    childrenToUse = childrenToUse === null ? [] : [].concat(childrenToUse);\n\n    if (childrenToUse.length) {\n\n      // Discriminating content components from real children\n      const {content=null, realChildren=[]} = groupBy(childrenToUse, (c) => {\n        return CONTENT_TYPES[typeof c] ? 'content' : 'realChildren';\n      });\n\n      // Setting textual content\n      if (content)\n        node.setContent('' + content.join(''));\n\n      // Mounting real children\n      this.mountChildren(\n        realChildren,\n        transaction,\n        context\n      );\n    }\n\n    // Rendering the screen\n    ReactBlessedIDOperations.screen.debouncedRender();\n  }\n\n  /**\n   * Mounting the blessed node itself.\n   *\n   * @param   {BlessedNode|BlessedScreen} parent  - The parent node.\n   * @param   {ReactElement}              element - The element to mount.\n   * @return  {BlessedNode}                       - The mounted node.\n   */\n  mountNode(parent, element) {\n    const {props, type} = element,\n          {children, ...options} = props,\n          blessedElement = blessed[type];\n\n    invariant(\n      !!blessedElement,\n      `Invalid blessed element \"${type}\".`\n    );\n\n    const node = blessed[type](solveClass(options));\n\n    node.on('event', this._eventListener);\n    parent.append(node);\n\n    return node;\n  }\n\n  /**\n   * Receive a component update.\n   *\n   * @param {ReactElement}              nextElement\n   * @param {ReactReconcileTransaction} transaction\n   * @param {object}                    context\n   * @internal\n   * @overridable\n   */\n  receiveComponent(nextElement, transaction, context) {\n    const {props: {children, ...options}} = nextElement,\n          node = ReactBlessedIDOperations.get(this._rootNodeID);\n\n    this._updating = true;\n    update(node, solveClass(options));\n    this._updating = false;\n\n    // Updating children\n    const childrenToUse = children === null ? [] : [].concat(children);\n\n    // Discriminating content components from real children\n    const {content=null, realChildren=[]} = groupBy(childrenToUse, (c) => {\n      return CONTENT_TYPES[typeof c] ? 'content' : 'realChildren';\n    });\n\n    // Setting textual content\n    if (content)\n      node.setContent('' + content.join(''));\n\n    this.updateChildren(realChildren, transaction, context);\n\n    ReactBlessedIDOperations.screen.debouncedRender();\n  }\n\n  /**\n   * Dropping the component.\n   */\n  unmountComponent() {\n    this.unmountChildren();\n\n    const node = ReactBlessedIDOperations.get(this._rootNodeID);\n\n    node.off('event', this._eventListener);\n    node.destroy();\n\n    ReactBlessedIDOperations.drop(this._rootNodeID);\n\n    this._rootNodeID = null;\n\n    ReactBlessedIDOperations.screen.debouncedRender();\n  }\n\n  /**\n   * Getting a public instance of the component for refs.\n   *\n   * @return {BlessedNode} - The instance's node.\n   */\n  getPublicInstance() {\n    return ReactBlessedIDOperations.get(this._rootNodeID);\n  }\n}\n\n/**\n * Extending the component with the MultiChild mixin.\n */\nextend(\n  ReactBlessedComponent.prototype,\n  ReactMultiChild.Mixin\n);\n","/home/travis/build/npmtest/node-npmtest-react-blessed/node_modules/react-blessed/src/ReactBlessedIDOperations.js":"/**\n * React Blessed ID Operations\n * ============================\n *\n * Cache register for blessed nodes stored by ID.\n */\nimport {debounce} from 'lodash';\n\n/**\n * The blessed nodes internal index;\n */\nconst blessedNodes = {};\n\n/**\n * Backend for blessed ID operations.\n *\n * @constructor ReactBlessedIDOperations\n */\nclass ReactBlessedIDOperations {\n  constructor() {\n    this.screen = null;\n  }\n\n  /**\n   * Set the current screen.\n   *\n   * @param  {BlessedScreen} screen     - The screen to attach.\n   * @return {ReactBlessedIDOperations} - Returns itself.\n   */\n  setScreen(screen) {\n    this.screen = screen;\n\n    // Creating a debounced version of the render method so we won't render\n    // multiple time per frame, in vain.\n    screen.debouncedRender = debounce(() => screen.render(), 0);\n\n    return this;\n  }\n\n  /**\n   * Add a new node to the index.\n   *\n   * @param  {string}      ID           - The node's id.\n   * @param  {BlessedNode} node         - The node itself.\n   * @return {ReactBlessedIDOperations} - Returns itself.\n   */\n  add(ID, node) {\n    blessedNodes[ID] = node;\n    return this;\n  }\n\n  /**\n   * Get a node from the index.\n   *\n   * @param  {string}      ID - The node's id.\n   * @return {BlessedNode}    - The node.\n   */\n  get(ID) {\n    return blessedNodes[ID];\n  }\n\n  /**\n   * Get the parent of a node from the index.\n   *\n   * @param  {string}                    ID - The node's id.\n   * @return {BlessedScreen|BlessedNode}    - The node.\n   */\n  getParent(ID) {\n\n    // If the node is root, we return the screen itself\n    if (ID.match(/\\./g).length === 1)\n      return this.screen;\n\n    const parentID = ID.split('.').slice(0, -1).join('.');\n    return this.get(parentID);\n  }\n\n  /**\n   * Drop a node from the index.\n   *\n   * @param  {string}                   ID - The node's id.\n   * @return {ReactBlessedIDOperations}    - Returns itself.\n   */\n  drop(ID) {\n    delete blessedNodes[ID];\n    return this;\n  }\n}\n\nexport default new ReactBlessedIDOperations();\n","/home/travis/build/npmtest/node-npmtest-react-blessed/node_modules/react-blessed/src/ReactBlessedInjection.js":"/**\n * React Blessed Dependency Injection\n * ===================================\n *\n * Injecting the renderer's needed dependencies into React's internals.\n */\nimport ReactInjection from 'react/lib/ReactInjection';\nimport ReactComponentEnvironment from 'react/lib/ReactComponentEnvironment';\nimport ReactBlessedReconcileTransaction from './ReactBlessedReconcileTransaction';\nimport ReactBlessedComponent from './ReactBlessedComponent';\n\nexport default function inject() {\n\n  ReactInjection.NativeComponent.injectGenericComponentClass(\n    ReactBlessedComponent\n  );\n\n  ReactInjection.Updates.injectReconcileTransaction(\n    ReactBlessedReconcileTransaction\n  );\n\n  ReactInjection.EmptyComponent.injectEmptyComponent('element');\n\n  // NOTE: we're monkeypatching ReactComponentEnvironment because\n  // ReactInjection.Component.injectEnvironment() currently throws,\n  // as it's already injected by ReactDOM for backward compat in 0.14 betas.\n  // Read more: https://github.com/Yomguithereal/react-blessed/issues/5\n  ReactComponentEnvironment.processChildrenUpdates = function () {};\n  ReactComponentEnvironment.replaceNodeWithMarkupByID = function () {};\n}\n","/home/travis/build/npmtest/node-npmtest-react-blessed/node_modules/react-blessed/src/ReactBlessedReconcileTransaction.js":"/**\n * React Blessed Specific React Transaction\n * =========================================\n *\n * React custom reconcile transaction injected by the renderer to enable\n * updates.\n *\n * NOTE: This looks more like a shim than the proper thing actually.\n */\nimport CallbackQueue from 'react/lib/CallbackQueue';\nimport PooledClass from 'react/lib/PooledClass';\nimport Transaction from 'react/lib/Transaction';\nimport {extend} from 'lodash';\n\nconst ON_BLESSED_READY_QUEUEING = {\n  initialize: function () {\n    this.reactMountReady.reset();\n  },\n  close: function () {\n    this.reactMountReady.notifyAll();\n  }\n};\n\nfunction ReactBlessedReconcileTransaction() {\n  this.reinitializeTransaction();\n  this.reactMountReady = CallbackQueue.getPooled(null);\n}\n\nconst Mixin = {\n  getTransactionWrappers: function() {\n    return [ON_BLESSED_READY_QUEUEING];\n  },\n  getReactMountReady: function() {\n    return this.reactMountReady;\n  },\n  destructor: function() {\n    CallbackQueue.release(this.reactMountReady);\n    this.reactMountReady = null;\n  }\n};\n\nextend(\n  ReactBlessedReconcileTransaction.prototype,\n  Transaction.Mixin,\n  Mixin\n);\n\nPooledClass.addPoolingTo(ReactBlessedReconcileTransaction);\n\nexport default ReactBlessedReconcileTransaction;\n","/home/travis/build/npmtest/node-npmtest-react-blessed/node_modules/react-blessed/src/render.js":"/**\n * React Blessed\n * ==============\n *\n * Exposing the renderer's API.\n */\nimport ReactInstanceHandles from 'react/lib/ReactInstanceHandles';\nimport ReactElement from 'react/lib/ReactElement';\nimport ReactUpdates from 'react/lib/ReactUpdates';\nimport ReactBlessedIDOperations from './ReactBlessedIDOperations';\nimport invariant from 'invariant';\nimport instantiateReactComponent from 'react/lib/instantiateReactComponent';\nimport inject from './ReactBlessedInjection';\nimport {Screen} from 'blessed';\n\n/**\n * Injecting dependencies.\n */\ninject();\n\n/**\n * Renders the given react element with blessed.\n *\n * @param  {ReactElement}   element   - Node to update.\n * @param  {BlessedScreen}  screen    - The screen used to render the app.\n * @return {ReactComponent}           - The rendered component instance.\n */\nfunction render(element, screen) {\n\n  // Is the given element valid?\n  invariant(\n    ReactElement.isValidElement(element),\n    'render(): You must pass a valid ReactElement.'\n  );\n\n  // Is the given screen valid?\n  invariant(\n    screen instanceof Screen,\n    'render(): You must pass a valid BlessedScreen.'\n  );\n\n  // Creating a root id & creating the screen\n  const id = ReactInstanceHandles.createReactRootID();\n\n  // Mounting the app\n  const component = instantiateReactComponent(element);\n\n  // Injecting the screen\n  ReactBlessedIDOperations.setScreen(screen);\n\n  // The initial render is synchronous but any updates that happen during\n  // rendering, in componentWillMount or componentDidMount, will be batched\n  // according to the current batching strategy.\n  ReactUpdates.batchedUpdates(() => {\n    // Batched mount component\n    const transaction = ReactUpdates.ReactReconcileTransaction.getPooled();\n    transaction.perform(() => {\n      component.mountComponent(id, transaction, {});\n    });\n    ReactUpdates.ReactReconcileTransaction.release(transaction);\n  });\n\n  // Returning the screen so the user can attach listeners etc.\n  return component._instance;\n}\n\nexport {render};\n","/home/travis/build/npmtest/node-npmtest-react-blessed/node_modules/react-blessed/src/solveClass.js":"/**\n * React Blessed Classes Solving\n * ==============================\n *\n * Solving a component's classes to apply correct props to an element.\n */\nimport {merge, compact} from 'lodash';\n\n/**\n * Solves the given props by applying classes.\n *\n * @param  {object}  props - The component's props.\n * @return {object}        - The solved props.\n */\nexport default function solveClass(props) {\n  let {class: classes, ...rest} = props;\n\n  // Coercing to array & compacting\n  classes = compact([].concat(classes));\n\n  return merge.apply(null, [{}].concat(classes).concat(rest));\n}\n","/home/travis/build/npmtest/node-npmtest-react-blessed/node_modules/react-blessed/src/update.js":"/**\n * React Blessed Update Schemes\n * =============================\n *\n * Applying updates to blessed nodes correctly.\n */\nimport _ from 'lodash';\n\nconst RAW_ATTRIBUTES = new Set([\n\n  // Alignment, Orientation & Presentation\n  'align',\n  'valign',\n  'orientation',\n  'shrink',\n  'padding',\n  'tags',\n  'shadow',\n\n  // Font-related\n  'font',\n  'fontBold',\n  'fch',\n  'ch',\n  'bold',\n  'underline',\n\n  // Flags\n  'clickable',\n  'input',\n  'keyable',\n  'hidden',\n  'visible',\n  'scrollable',\n  'draggable',\n  'interactive',\n\n  // Position\n  'left',\n  'right',\n  'top',\n  'bottom',\n  'aleft',\n  'aright',\n  'atop',\n  'abottom',\n\n  // Size\n  'width',\n  'height',\n\n  // Checkbox\n  'checked',\n\n  // Misc\n  'name'\n]);\n\n/**\n * Updates the given blessed node.\n *\n * @param {BlessedNode} node    - Node to update.\n * @param {object}      options - Props of the component without children.\n */\nexport default function update(node, options) {\n\n  // TODO: enforce some kind of shallow equality?\n  // TODO: handle position\n\n  const selectQue = []\n\n  for (let key in options) {\n    let value = options[key];\n\n    if (key === 'selected' && node.select)\n      selectQue.push({\n        node,\n        value: (typeof value === 'string' ? +value : value)\n      })\n    \n    // Setting label\n    else if (key === 'label')\n      node.setLabel(value);\n\n    // Removing hoverText\n    else if (key === 'hoverText' && !value) node.removeHover()\n\n    // Setting hoverText\n    else if (key === 'hoverText' && value) node.setHover(value)\n\n    // Setting content\n    else if (key === 'content')\n      node.setContent(value);\n\n    // Updating style\n    else if (key === 'style')\n      node.style = _.merge({}, node.style, value);\n\n    // Updating items\n    else if (key === 'items')\n      node.setItems(value);\n\n    // Border edge case\n    else if (key === 'border')\n      node.border = _.merge({}, node.border, value);\n\n    // Textarea value\n    else if (key === 'value' && node.setValue)\n      node.setValue(value);\n\n    // Progress bar\n    else if (key === 'filled' && node.filled !== value)\n      node.setProgress(value);\n\n    // Table / ListTable rows / data\n    else if ((key === 'rows' || key === 'data') && node.setData)\n      node.setData(value);\n\n    else if (key === 'focused' && value && !node[key]) node.focus()\n\n    // Raw attributes\n    else if (RAW_ATTRIBUTES.has(key))\n      node[key] = value;\n  }\n\n  selectQue.forEach(({node, value}) => node.select(value))\n}\n"}